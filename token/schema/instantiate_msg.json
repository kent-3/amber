{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "decimals",
    "name",
    "prng_seed",
    "symbol"
  ],
  "properties": {
    "admin": {
      "type": [
        "string",
        "null"
      ]
    },
    "config": {
      "anyOf": [
        {
          "$ref": "#/definitions/InitConfig"
        },
        {
          "type": "null"
        }
      ]
    },
    "decimals": {
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "initial_balances": {
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/InitialBalance"
      }
    },
    "name": {
      "type": "string"
    },
    "prng_seed": {
      "$ref": "#/definitions/Binary"
    },
    "supported_denoms": {
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "symbol": {
      "type": "string"
    }
  },
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "InitConfig": {
      "description": "This type represents optional configuration values which can be overridden. All values are optional and have defaults which are more private by default, but can be overridden if necessary",
      "type": "object",
      "properties": {
        "can_modify_denoms": {
          "description": "Indicated whether an admin can modify supported denoms default: False",
          "type": [
            "boolean",
            "null"
          ]
        },
        "enable_burn": {
          "description": "Indicates whether burn functionality should be enabled default: False",
          "type": [
            "boolean",
            "null"
          ]
        },
        "enable_deposit": {
          "description": "Indicates whether deposit functionality should be enabled default: False",
          "type": [
            "boolean",
            "null"
          ]
        },
        "enable_mint": {
          "description": "Indicates whether mint functionality should be enabled default: False",
          "type": [
            "boolean",
            "null"
          ]
        },
        "enable_redeem": {
          "description": "Indicates whether redeem functionality should be enabled default: False",
          "type": [
            "boolean",
            "null"
          ]
        },
        "public_total_supply": {
          "description": "Indicates whether the total supply is public or should be kept secret. default: False",
          "type": [
            "boolean",
            "null"
          ]
        }
      }
    },
    "InitialBalance": {
      "type": "object",
      "required": [
        "address",
        "amount"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use secret_cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
