{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryAnswer",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "token_info"
      ],
      "properties": {
        "token_info": {
          "type": "object",
          "required": [
            "decimals",
            "name",
            "symbol"
          ],
          "properties": {
            "decimals": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "name": {
              "type": "string"
            },
            "symbol": {
              "type": "string"
            },
            "total_supply": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "token_config"
      ],
      "properties": {
        "token_config": {
          "type": "object",
          "required": [
            "burn_enabled",
            "deposit_enabled",
            "mint_enabled",
            "public_total_supply",
            "redeem_enabled",
            "supported_denoms"
          ],
          "properties": {
            "burn_enabled": {
              "type": "boolean"
            },
            "deposit_enabled": {
              "type": "boolean"
            },
            "mint_enabled": {
              "type": "boolean"
            },
            "public_total_supply": {
              "type": "boolean"
            },
            "redeem_enabled": {
              "type": "boolean"
            },
            "supported_denoms": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "contract_status"
      ],
      "properties": {
        "contract_status": {
          "type": "object",
          "required": [
            "status"
          ],
          "properties": {
            "status": {
              "$ref": "#/definitions/ContractStatusLevel"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "exchange_rate"
      ],
      "properties": {
        "exchange_rate": {
          "type": "object",
          "required": [
            "denom",
            "rate"
          ],
          "properties": {
            "denom": {
              "type": "string"
            },
            "rate": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "allowance"
      ],
      "properties": {
        "allowance": {
          "type": "object",
          "required": [
            "allowance",
            "owner",
            "spender"
          ],
          "properties": {
            "allowance": {
              "$ref": "#/definitions/Uint128"
            },
            "expiration": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            },
            "spender": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "allowances_given"
      ],
      "properties": {
        "allowances_given": {
          "type": "object",
          "required": [
            "allowances",
            "count",
            "owner"
          ],
          "properties": {
            "allowances": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AllowanceGivenResult"
              }
            },
            "count": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "allowances_received"
      ],
      "properties": {
        "allowances_received": {
          "type": "object",
          "required": [
            "allowances",
            "count",
            "spender"
          ],
          "properties": {
            "allowances": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AllowanceReceivedResult"
              }
            },
            "count": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "spender": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "balance"
      ],
      "properties": {
        "balance": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "transfer_history"
      ],
      "properties": {
        "transfer_history": {
          "type": "object",
          "required": [
            "txs"
          ],
          "properties": {
            "total": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "txs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tx"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "transaction_history"
      ],
      "properties": {
        "transaction_history": {
          "type": "object",
          "required": [
            "txs"
          ],
          "properties": {
            "total": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "txs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExtendedTx"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "viewing_key_error"
      ],
      "properties": {
        "viewing_key_error": {
          "type": "object",
          "required": [
            "msg"
          ],
          "properties": {
            "msg": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "minters"
      ],
      "properties": {
        "minters": {
          "type": "object",
          "required": [
            "minters"
          ],
          "properties": {
            "minters": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Addr"
              }
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AllowanceGivenResult": {
      "type": "object",
      "required": [
        "allowance",
        "spender"
      ],
      "properties": {
        "allowance": {
          "$ref": "#/definitions/Uint128"
        },
        "expiration": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "spender": {
          "$ref": "#/definitions/Addr"
        }
      }
    },
    "AllowanceReceivedResult": {
      "type": "object",
      "required": [
        "allowance",
        "owner"
      ],
      "properties": {
        "allowance": {
          "$ref": "#/definitions/Uint128"
        },
        "expiration": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "owner": {
          "$ref": "#/definitions/Addr"
        }
      }
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "ContractStatusLevel": {
      "type": "string",
      "enum": [
        "normal_run",
        "stop_all_but_redeems",
        "stop_all"
      ]
    },
    "ExtendedTx": {
      "type": "object",
      "required": [
        "action",
        "block_height",
        "block_time",
        "coins",
        "id"
      ],
      "properties": {
        "action": {
          "$ref": "#/definitions/TxAction"
        },
        "block_height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "block_time": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "coins": {
          "$ref": "#/definitions/Coin"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "memo": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Tx": {
      "type": "object",
      "required": [
        "coins",
        "from",
        "id",
        "receiver",
        "sender"
      ],
      "properties": {
        "block_height": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "block_time": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "coins": {
          "$ref": "#/definitions/Coin"
        },
        "from": {
          "$ref": "#/definitions/Addr"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "memo": {
          "type": [
            "string",
            "null"
          ]
        },
        "receiver": {
          "$ref": "#/definitions/Addr"
        },
        "sender": {
          "$ref": "#/definitions/Addr"
        }
      }
    },
    "TxAction": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "transfer"
          ],
          "properties": {
            "transfer": {
              "type": "object",
              "required": [
                "from",
                "recipient",
                "sender"
              ],
              "properties": {
                "from": {
                  "$ref": "#/definitions/Addr"
                },
                "recipient": {
                  "$ref": "#/definitions/Addr"
                },
                "sender": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "mint"
          ],
          "properties": {
            "mint": {
              "type": "object",
              "required": [
                "minter",
                "recipient"
              ],
              "properties": {
                "minter": {
                  "$ref": "#/definitions/Addr"
                },
                "recipient": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "burn"
          ],
          "properties": {
            "burn": {
              "type": "object",
              "required": [
                "burner",
                "owner"
              ],
              "properties": {
                "burner": {
                  "$ref": "#/definitions/Addr"
                },
                "owner": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "deposit"
          ],
          "properties": {
            "deposit": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "redeem"
          ],
          "properties": {
            "redeem": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "decoy"
          ],
          "properties": {
            "decoy": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use secret_cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
